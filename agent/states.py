from typing   import Optional                        # Core typing support for optional fields
from pydantic import BaseModel, Field, ConfigDict    # Pydantic for schema validation and structured data modeling


# ────────────────────────────────────────────────────────────────────────────────────────
# File metadata for code generation
# ────────────────────────────────────────────────────────────────────────────────────────
class File(BaseModel):
    path    : str = Field(
                            description = "Path to the file to be created or modified. Used for file-level targeting."
                         )
    purpose : str = Field(
                            description = "Purpose of the file, e.g. 'main application logic', 'data processing module'. Helps guide content generation."
                         )
# ────────────────────────────────────────────────────────────────────────────────────────
# Define the schema for list_files
# ────────────────────────────────────────────────────────────────────────────────────────
class ListFilesInput(BaseModel):
    directory    : str        = Field(
                                      default=".", 
                                      description="Directory path to list files from"
                                    )

# ────────────────────────────────────────────────────────────────────────────────────────
# High-level app blueprint from planner_agent
# ────────────────────────────────────────────────────────────────────────────────────────
class Plan(BaseModel):
    name        : str        = Field(
                                      description = "Name of the app to be built. Used for branding and context."
                                    )
    description : str        = Field(
                                      description = "One-line description of the app, e.g. 'A web application for managing personal finances'."
                                    )
    techstack   : str        = Field(
                                      description = "Tech stack to be used, e.g. 'python', 'javascript', 'react', 'flask'. Guides implementation choices."
                                    )
    features    : list[str]  = Field(
                                      description = "List of features the app should support, e.g. 'user authentication', 'data visualization'."
                                    )
    files       : list[File] = Field(
                                      description = "List of files to be created, each with a path and purpose. Used by architect_agent for scaffolding."
                                    )

# ────────────────────────────────────────────────────────────────────────────────────────
# Granular implementation task for each file
# ────────────────────────────────────────────────────────────────────────────────────────
class ImplementationTask(BaseModel):
    filepath         : str = Field(
                                     description = "Path to the file to be modified. Used by coder_agent to locate and edit content."
                                  )
    task_description : str = Field(
                                     description = "Detailed description of the task to be performed, e.g. 'add user authentication', 'implement data processing logic'."
                                  )

# ────────────────────────────────────────────────────────────────────────────────────────
# TaskPlan: Ordered steps for implementation
# ────────────────────────────────────────────────────────────────────────────────────────
class TaskPlan(BaseModel):
    implementation_steps : list[ImplementationTask] = Field(
                                                              description = "Ordered list of implementation steps. Each step targets a file and describes a task."
                                                           )
    model_config         = ConfigDict(extra="allow")          # Allows extra fields for flexibility during LLM output parsing

# ────────────────────────────────────────────────────────────────────────────────────────
# CoderState: Tracks progress through TaskPlan
# ────────────────────────────────────────────────────────────────────────────────────────
class CoderState(BaseModel):
    task_plan            : TaskPlan      = Field(
                                                  description = "The full implementation plan generated by architect_agent."
                                                )
    current_step_idx     : int           = Field(
                                                  0,
                                                  description = "Index of the current step being executed. Used to iterate through implementation_steps."
                                                )
    current_file_content : Optional[str] = Field(
                                                  None,
                                                  description = "Content of the file currently being edited. Used for context injection into coder_agent prompts."
                                                )